<?php

function buildAnsOf($tbl) {
	global $sql;
	
	if (trim($tbl)=='') return false;
		
	$vans = $sql->query("show columns from `{$tbl}`");
	if (!$vans) return false;
		
	$ans = "";
	while ($row = $sql->fetch_array_fromresults($vans, MYSQL_NUM)) {
		$name = $row[0];
		if (($name!='index') && ($name!='guid') && ($name!='data') && ($name!='template')) {
			if ($ans != '') $ans.=",";
			$ans.="'{$name}'";
		}
	}
	
	$ans = "'".substr($tbl,0,-9)."' => array(".$ans.")";
	return $ans;
}

function updateTableCache() {
	global $sql, $_CONFIG;
	
	$ans ="# Automatically generated by package administrator.\n".
	"# Please do not edit by hand!\n".
	"global \$TableInstanceFields;\n".
	"\$TableInstanceFields = array(\n";

	// Find out all the tables that support instancing
	$buf = "";
	$sql->query("show tables");
	$tables = $sql->fetch_array_all(MYSQL_NUM);
	foreach ($tables as $table) {
		if ((strtolower(substr($table[0],-9)) == '_instance') && (strlen($table[0])>9))  {
			if ($buf != '') $buf .= ",\n";
			$dat = buildAnsOf($table[0]);
			if (!($dat===false)) $buf .= $dat;
		}
	}
	
	$ans .= $buf."\n";
	$ans .= ");\n";
	
	// Dump file
	$f = fopen($_CONFIG[GAME][BASE]."/engine/data/template_dictionary.php", "w");
	fwrite($f, "<"."?"."php\n");
	fwrite($f, $ans);
	fwrite($f, "?".">");
	fclose($f);
	//echo $ans;
}

function updateDictionaryCache() {
	global $sql, $_CONFIG;
	
	$ans ="# Automatically generated by package administrator.\n".
	"# Please do not edit by hand!\n".
	"global \$GUIDGroupOf, \$GUIDReverseOf;\n".
	"\$GUIDGroupOf = array(\n";

	// Find out all the tables that support instancing
	$sql->query("SELECT * FROM `system_group_dictionary`");
	$ids = array();
	$names = array();
	while ($row = $sql->fetch_array()) {
		array_push($ids,  $row['index']);
		array_push($names, $row['name']);
	}
	
	$buf = "";
	foreach ($ids as $index => $id) {
		if ($buf!='') $buf.=",\n";
		$buf .= "$id => '".$names[$index]."'";
	}
	
	$ans .= $buf."\n";
	$ans .= ");\n";
	$ans .= "\$GUIDReverseOf = array(\n";

	$buf = "";
	foreach ($ids as $index => $id) {
		if ($buf!='') $buf.=",\n";
		$buf .= "'".$names[$index]."' => $id";
	}

	$ans .= $buf."\n";
	$ans .= ");\n";
	
	$f = fopen($_CONFIG[GAME][BASE]."/engine/data/guid_dictionary.php", "w");
	fwrite($f, "<"."?"."php\n");
	fwrite($f, $ans);
	fwrite($f, "?".">");
	fclose($f);

}

function updateEventChainCache() {
	global $_CONFIG, $EventChain;
	// Build dictionary file
	$buf="<".'?'."php\n# Automatically generated by package administrator.\n# Please do not edit by hand!\nglobal \$EventChain;\n\$EventChain = array(\n";
	$first=true;
	foreach ($EventChain as $chain => $data) {
		if (!$first) $buf.=",\n";
		$buf.="'$chain'=>array( ";
		$zfirst = true;
		foreach ($data as $rows) {
			if (!$zfirst) $buf.=", ";
			$buf.="array('{$rows[0]}', '{$rows[1]}')";
			$zfirst=false;
		}
		$buf.=") ";
		$first=false;
	}
	$buf.="\n);\n?".">";
	file_put_contents($_CONFIG[GAME][BASE]."/engine/data/event_chain.php", $buf);
	
}
?>